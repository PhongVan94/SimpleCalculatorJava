package control;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import view.CalculatorView;

public class CalculatorControllerClean extends KeyAdapter implements ActionListener{

	private CalculatorView calculatorView;
	private String currentValue,stringMemory;
	private String mValue;

	public CalculatorControllerClean(CalculatorView calculatorView) {
		this.calculatorView = calculatorView;
	}

	public void setFunction(String func) {
		float result;
		float newIterator = 0;	
		mValue = calculatorView.lbl_MValue.getText();		
		currentValue = calculatorView.lbl_InputValue.getText() +" ";
		if(!currentValue.isEmpty())
			newIterator = Float.parseFloat(currentValue);
		// Equals		
		if (func == "f1") {
			switch (calculatorView.getOperator()) {
			case 0:
				result = calculatorView.getOldIterator() + newIterator;
				calculatorView.lbl_InputValue.setText(String.valueOf(result));
				calculatorView.lbl_MValue.setText(
						String.valueOf(calculatorView.getOldIterator()) + " + " + String.valueOf(newIterator) + " = ");
				break;
			case 1:
				result = calculatorView.getOldIterator() - newIterator;
				calculatorView.lbl_InputValue.setText(String.valueOf(result));
				calculatorView.lbl_MValue.setText(
						String.valueOf(calculatorView.getOldIterator()) + " - " + String.valueOf(newIterator) + " = ");
				break;
			case 2:
				result = calculatorView.getOldIterator() * newIterator;
				calculatorView.lbl_InputValue.setText(String.valueOf(result));
				calculatorView.lbl_MValue.setText(
						String.valueOf(calculatorView.getOldIterator()) + " x " + String.valueOf(newIterator) + " = ");
				break;
			case 3:
				if (newIterator != 0) {
					result = calculatorView.getOldIterator() / newIterator;
					calculatorView.lbl_InputValue.setText(String.valueOf(result));
					calculatorView.lbl_MValue.setText(String.valueOf(calculatorView.getOldIterator()) + " : "+ String.valueOf(newIterator) + " = ");
					;
				}
				break;
			default:
				calculatorView.setOldIterator(newIterator);
				calculatorView.lbl_MValue.setText(String.valueOf(calculatorView.getOldIterator() + " = "));
			}
			calculatorView.setOperator(-1);
			calculatorView.setOperatorState(true);
			return;
		}

		//Add
		if (func == "f2") {
			calculatorView.setOperator(0);
			calculatorView.setOperatorState(true);
			calculatorView.setOldIterator(Float.parseFloat(currentValue));
			calculatorView.lbl_MValue.setText(stringMemory);
			return;
		}

		// Sub
		if (func == "f3") {
			calculatorView.setOperator(1);
			calculatorView.setOperatorState(true);
			calculatorView.setOldIterator(Float.parseFloat(currentValue));
			calculatorView.lbl_MValue.setText(stringMemory);
			return;
		}

		// Mul 
		if(func == "f4") {
			calculatorView.setOperator(2); calculatorView.setOperatorState(true);
			calculatorView.setOldIterator(Float.parseFloat(currentValue)); 
			calculatorView.lbl_MValue.setText(stringMemory); 
			return; 
		}

		//Div 
		if(func == "f5") {
			calculatorView.setOperator(3); 
			calculatorView.setOperatorState(true);
			calculatorView.setOldIterator(Float.parseFloat(currentValue)); 
			calculatorView.lbl_MValue.setText(stringMemory); 
			return; 
		}

		//SQR 
		if(func == "f6") {
			if(newIterator >= 0) {
				result = (float)newIterator*newIterator;
				calculatorView.lbl_InputValue.setText(String.valueOf(result));
				if (mValue.isEmpty() || mValue.indexOf('=') > 0 || mValue == "0") {
					calculatorView.lbl_MValue.setText(String.valueOf(newIterator) + "^2 = ");
				}else
					calculatorView.lbl_MValue.setText(mValue + " (" + String.valueOf(newIterator) + "^2) ");

			}
			calculatorView.setOperatorState(true);
			return;
		}

		//Revert
		if(func == "f7") {
			if(newIterator != 0) {
				result = (float)1/newIterator;
				calculatorView.lbl_InputValue.setText(String.valueOf(result));
				if (mValue.isEmpty() || mValue.indexOf('=') > 0 || mValue == "0") {
					calculatorView.lbl_MValue.setText("1 / " + String.valueOf(newIterator) + " = ");
				}else
					calculatorView.lbl_MValue.setText(mValue + "1 / " + String.valueOf(newIterator));
			}
			calculatorView.setOperatorState(true);
			return;
		}
		//SQRT
		if(func == "f8") {
			if(newIterator >= 0) {
				result = (float)Math.sqrt(newIterator);
				calculatorView.lbl_InputValue.setText(String.valueOf(result));
				if (mValue.isEmpty() || mValue.indexOf('=') > 0 || mValue == "0") {
					calculatorView.lbl_MValue.setText("Sqrt(" + String.valueOf(newIterator) + ") = ");
				}else
					calculatorView.lbl_MValue.setText(mValue + "Sqrt(" + String.valueOf(newIterator) + ")");

			}
			calculatorView.setOperatorState(true);
			return;
		}


		// Percent
		if(func == "f9") {
			result = (float)(newIterator / 100);
			calculatorView.lbl_InputValue.setText(String.valueOf(result));
			if (mValue.isEmpty() || mValue.indexOf('=') > 0 || mValue == "0") {
				calculatorView.lbl_MValue.setText("(" + String.valueOf(newIterator) + ")% = ");
			}else
				calculatorView.lbl_MValue.setText(mValue + "(" + String.valueOf(newIterator) + ")% ");


			;
			calculatorView.setOperatorState(true);
			return;
		}

		// Backspace
		if (func == "f10") {
			if (!currentValue.isEmpty() && mValue.indexOf('=') <= 0) {
				String newValue = currentValue.substring(0, currentValue.length() - 1);
				if (newValue.isEmpty())
				{
					calculatorView.lbl_InputValue.setText("0");
					calculatorView.setOperatorState(true);
				}
				else
					calculatorView.lbl_InputValue.setText(newValue);
			}
			return;			
		}

		// point number
		if ( func == "f11") {
			if (currentValue.indexOf('.') > 0)
				calculatorView.lbl_InputValue.setText(currentValue);
			else
				calculatorView.lbl_InputValue.setText(currentValue + ".");
			return;
		}

		// Alter
		if (func == "f12") {
			calculatorView.lbl_InputValue.setText(Float.valueOf(currentValue)*(-1) +"");
			return;
		}
		
		// Reset
		if (func == "f13") {
			calculatorView.setOperator(-1);
			calculatorView.setOperatorState(true);
			calculatorView.setOldIterator(0);
			calculatorView.lbl_InputValue.setText("0");
			calculatorView.lbl_MValue.setText("0");
			return;
		}
		// edit
		if (func == "f14") {
			calculatorView.lbl_InputValue.setText("0");
			calculatorView.setOperatorState(true);
			return;
		}
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		
		String s = e.getActionCommand();
		Object o = e.getSource();
		stringMemory = calculatorView.lbl_InputValue.getText() + "" + s;
		currentValue = calculatorView.lbl_InputValue.getText() +"";
		if (calculatorView.isDigitButton(o)) {
			// Click button number
			if (this.calculatorView.isOperatorState()) {
				calculatorView.lbl_InputValue.setText(s);
				calculatorView.setOperatorState(false);
			} else
				calculatorView.lbl_InputValue.setText(currentValue + s );
		}else {
		
		// Click Button of Result
		if (o == calculatorView.btnResult) {
			this.setFunction("f1");
		}
			
		// Click Button of Add
		if (o == calculatorView.btnAdd) {
			this.setFunction("f2");
		}

		// Click Button of Sub
		if (o == calculatorView.btnSub) {
			this.setFunction("f3");
		}

		// Click Button of Mul 
		if(o == calculatorView.btnMul) {
			this.setFunction("f4");
		}

		//	Click Button of Div 
		if(o == calculatorView.btnDiv) {
			this.setFunction("f5");
		}

		//	Click Button of SQR 
		if(o == calculatorView.btnSqr) {
			this.setFunction("f6");
		}

		// Click button of Revert
		if(o == calculatorView.btnRev) {
			this.setFunction("f7");
		}
		//Click button of SQRT
		if(o == calculatorView.btnSqrt) {
			this.setFunction("f8");
		}

		// Click button of Percent
		if(o == calculatorView.btnPer) {
			this.setFunction("f9");
		}

		// Click button of Backspace
		if (o == calculatorView.btnBack) {
			this.setFunction("f10");		
		}

		// Click point number
		if (o == calculatorView.btnPoint) {
			this.setFunction("f11");
		}

		// Click Alter
		if (o == calculatorView.btnAlt) {
			this.setFunction("f12");
		}

		// Click Button of Reset
		if (o == calculatorView.btnReset) {
			this.setFunction("f13");
		}
		// Click Button of edit
		if (o == calculatorView.btnEdit) {
			this.setFunction("f14");
		}
	}
	}

	@Override
	public void keyTyped(KeyEvent e) {
		char keyChar = e.getKeyChar();
		currentValue = calculatorView.lbl_InputValue.getText() +"";
		stringMemory = calculatorView.lbl_InputValue.getText() + " " + String.valueOf(keyChar);

		if (Character.isDigit(keyChar)) {
			if(this.calculatorView.isOperatorState()){
				// Nếu là ký tự số, thêm nó vào dữ liệu đầu vào
				calculatorView.lbl_InputValue.setText(String.valueOf(keyChar));
				System.out.println(currentValue);
				calculatorView.setOperatorState(false);
			}else {
				calculatorView.lbl_InputValue.setText(currentValue += String.valueOf(keyChar));
				System.out.println(currentValue);
			}

		}else if (calculatorView.isOperatorKey(keyChar)) {
			System.out.println(keyChar);
			// Nếu là ký tự toán tử, đặt toán tử và cập nhật trạng thái
			if (keyChar == '\n') {
				this.setFunction("f1");
				}
		if (keyChar == '+') {
			this.setFunction("f2");
		}
		if (keyChar == '-'){
			this.setFunction("f3");
		}
		if (keyChar == '*'){
			this.setFunction("f4");
		}
		if (keyChar == '/'){
			this.setFunction("f5");
		}
		if (keyChar == '.') {
			this.setFunction("f11");
		}
		}

	} 


	@Override
	public void keyPressed(KeyEvent e) {
		mValue = calculatorView.lbl_MValue.getText();
		int keyCode = e.getKeyCode();

		if (keyCode == KeyEvent.VK_BACK_SPACE) {
			if (!currentValue.isEmpty() && mValue.indexOf('=') <= 0) {
				String newValue = currentValue.substring(0, currentValue.length() - 1);
				if (newValue.isEmpty())
				{
					calculatorView.lbl_InputValue.setText("0");
					calculatorView.setOperatorState(true);
				}
				else
					calculatorView.lbl_InputValue.setText(newValue);
			}
			return;			
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {

	}
}
